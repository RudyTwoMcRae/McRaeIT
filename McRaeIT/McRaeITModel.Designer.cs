//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 4/18/2019 2:35:46 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace McraeitContext
{

    [DatabaseAttribute(Name = "mcraei5_mcraeit")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class McraeitDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(McraeitDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCompanyAccount(CompanyAccount instance);
        partial void UpdateCompanyAccount(CompanyAccount instance);
        partial void DeleteCompanyAccount(CompanyAccount instance);
        partial void InsertConfiguration(Configuration instance);
        partial void UpdateConfiguration(Configuration instance);
        partial void DeleteConfiguration(Configuration instance);
        partial void InsertDepartment(Department instance);
        partial void UpdateDepartment(Department instance);
        partial void DeleteDepartment(Department instance);
        partial void InsertEmployeeLogin(EmployeeLogin instance);
        partial void UpdateEmployeeLogin(EmployeeLogin instance);
        partial void DeleteEmployeeLogin(EmployeeLogin instance);
        partial void InsertEmployee(Employee instance);
        partial void UpdateEmployee(Employee instance);
        partial void DeleteEmployee(Employee instance);
        partial void InsertIPAddress(IPAddress instance);
        partial void UpdateIPAddress(IPAddress instance);
        partial void DeleteIPAddress(IPAddress instance);
        partial void InsertServerGroup(ServerGroup instance);
        partial void UpdateServerGroup(ServerGroup instance);
        partial void DeleteServerGroup(ServerGroup instance);
        partial void InsertTicket(Ticket instance);
        partial void UpdateTicket(Ticket instance);
        partial void DeleteTicket(Ticket instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);

        #endregion

        public McraeitDataContext() :
        base(GetConnectionString("McraeitDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public McraeitDataContext(MappingSource mappingSource) :
        base(GetConnectionString("McraeitDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public McraeitDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public McraeitDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public McraeitDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public McraeitDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<CompanyAccount> CompanyAccounts
        {
            get
            {
                return this.GetTable<CompanyAccount>();
            }
        }

        public Devart.Data.Linq.Table<Configuration> Configurations
        {
            get
            {
                return this.GetTable<Configuration>();
            }
        }

        public Devart.Data.Linq.Table<Department> Departments
        {
            get
            {
                return this.GetTable<Department>();
            }
        }

        public Devart.Data.Linq.Table<EmployeeLogin> EmployeeLogins
        {
            get
            {
                return this.GetTable<EmployeeLogin>();
            }
        }

        public Devart.Data.Linq.Table<Employee> Employees
        {
            get
            {
                return this.GetTable<Employee>();
            }
        }

        public Devart.Data.Linq.Table<IPAddress> IPAddresses
        {
            get
            {
                return this.GetTable<IPAddress>();
            }
        }

        public Devart.Data.Linq.Table<ServerGroup> ServerGroups
        {
            get
            {
                return this.GetTable<ServerGroup>();
            }
        }

        public Devart.Data.Linq.Table<Ticket> Tickets
        {
            get
            {
                return this.GetTable<Ticket>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }
}

namespace McraeitContext
{

    /// <summary>
    /// There are no comments for McraeitContext.CompanyAccount in the schema.
    /// </summary>
    [Table(Name = @"mcraei5_mcraeit.CompanyAccounts")]
    public partial class CompanyAccount : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Name;

        private string _EMail;

        private string _Login;

        private string _Password;

        private string _Notes;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnEMailChanging(string value);
        partial void OnEMailChanged();
        partial void OnLoginChanging(string value);
        partial void OnLoginChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        #endregion

        public CompanyAccount()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "varchar(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EMail in the schema.
        /// </summary>
        [Column(Storage = "_EMail", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EMail
        {
            get
            {
                return this._EMail;
            }
            set
            {
                if (this._EMail != value)
                {
                    this.OnEMailChanging(value);
                    this.SendPropertyChanging("EMail");
                    this._EMail = value;
                    this.SendPropertyChanged("EMail");
                    this.OnEMailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Login in the schema.
        /// </summary>
        [Column(Storage = "_Login", DbType = "varchar(150) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Login
        {
            get
            {
                return this._Login;
            }
            set
            {
                if (this._Login != value)
                {
                    this.OnLoginChanging(value);
                    this.SendPropertyChanging("Login");
                    this._Login = value;
                    this.SendPropertyChanged("Login");
                    this.OnLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`Password`", Storage = "_Password", DbType = "varchar(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [Column(Storage = "_Notes", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging("Notes");
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for McraeitContext.Configuration in the schema.
    /// </summary>
    [Table(Name = @"mcraei5_mcraeit.Configurations")]
    public partial class Configuration : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Device;

        private string _Settings;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnDeviceChanging(string value);
        partial void OnDeviceChanged();
        partial void OnSettingsChanging(string value);
        partial void OnSettingsChanged();
        #endregion

        public Configuration()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Device in the schema.
        /// </summary>
        [Column(Storage = "_Device", CanBeNull = false, DbType = "varchar(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Device
        {
            get
            {
                return this._Device;
            }
            set
            {
                if (this._Device != value)
                {
                    this.OnDeviceChanging(value);
                    this.SendPropertyChanging("Device");
                    this._Device = value;
                    this.SendPropertyChanged("Device");
                    this.OnDeviceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Settings in the schema.
        /// </summary>
        [Column(Storage = "_Settings", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string Settings
        {
            get
            {
                return this._Settings;
            }
            set
            {
                if (this._Settings != value)
                {
                    this.OnSettingsChanging(value);
                    this.SendPropertyChanging("Settings");
                    this._Settings = value;
                    this.SendPropertyChanged("Settings");
                    this.OnSettingsChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for McraeitContext.Department in the schema.
    /// </summary>
    [Table(Name = @"mcraei5_mcraeit.Departments")]
    public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public Department()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "varchar(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for McraeitContext.EmployeeLogin in the schema.
    /// </summary>
    [Table(Name = @"mcraei5_mcraeit.EmployeeLogins")]
    public partial class EmployeeLogin : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int? _EmployeeID;

        private string _Description;

        private string _Login;

        private string _Password;
        #pragma warning restore 0649

        private EntityRef<Employee> _Employee;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnEmployeeIDChanging(int? value);
        partial void OnEmployeeIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnLoginChanging(string value);
        partial void OnLoginChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        #endregion

        public EmployeeLogin()
        {
            this._Employee  = default(EntityRef<Employee>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeID in the schema.
        /// </summary>
        [Column(Storage = "_EmployeeID", DbType = "int(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? EmployeeID
        {
            get
            {
                return this._EmployeeID;
            }
            set
            {
                if (this._EmployeeID != value)
                {
                    if (this._Employee.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging("EmployeeID");
                    this._EmployeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Storage = "_Description", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Login in the schema.
        /// </summary>
        [Column(Storage = "_Login", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Login
        {
            get
            {
                return this._Login;
            }
            set
            {
                if (this._Login != value)
                {
                    this.OnLoginChanging(value);
                    this.SendPropertyChanging("Login");
                    this._Login = value;
                    this.SendPropertyChanged("Login");
                    this.OnLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`Password`", Storage = "_Password", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employee in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_EmployeeLogin", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
        public Employee Employee
        {
            get
            {
                return this._Employee.Entity;
            }
            set
            {
                Employee previousValue = this._Employee.Entity;
                if ((previousValue != value) || (this._Employee.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Employee");
                    if (previousValue != null)
                    {
                        this._Employee.Entity = null;
                        previousValue.EmployeeLogins.Remove(this);
                    }
                    this._Employee.Entity = value;
                    if (value != null)
                    {
                        this._EmployeeID = value.ID;
                        value.EmployeeLogins.Add(this);
                    }
                    else
                    {
                        this._EmployeeID = default(int?);
                    }
                    this.SendPropertyChanged("Employee");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for McraeitContext.Employee in the schema.
    /// </summary>
    [Table(Name = @"mcraei5_mcraeit.Employees")]
    public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Name;

        private string _Department;

        private string _Ext;

        private string _DID;

        private string _Phone;

        private string _Cell;

        private string _EMail;

        private string _EMailPassword;

        private string _ComputerUser;

        private string _ComputerPassword;

        private string _Title;

        private bool? _List;

        private string _PhonePIN;

        private string _ServerLogin;

        private string _ServerPassword;

        private bool? _VPNAccess;

        private string _ServerGroups;

        private string _Notes;

        private string _SecurityCode;

        private int? _SecuritySlot;
        #pragma warning restore 0649

        private EntitySet<EmployeeLogin> _EmployeeLogins;

        private EntitySet<Ticket> _Tickets;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDepartmentChanging(string value);
        partial void OnDepartmentChanged();
        partial void OnExtChanging(string value);
        partial void OnExtChanged();
        partial void OnDIDChanging(string value);
        partial void OnDIDChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnCellChanging(string value);
        partial void OnCellChanged();
        partial void OnEMailChanging(string value);
        partial void OnEMailChanged();
        partial void OnEMailPasswordChanging(string value);
        partial void OnEMailPasswordChanged();
        partial void OnComputerUserChanging(string value);
        partial void OnComputerUserChanged();
        partial void OnComputerPasswordChanging(string value);
        partial void OnComputerPasswordChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnListChanging(bool? value);
        partial void OnListChanged();
        partial void OnPhonePINChanging(string value);
        partial void OnPhonePINChanged();
        partial void OnServerLoginChanging(string value);
        partial void OnServerLoginChanged();
        partial void OnServerPasswordChanging(string value);
        partial void OnServerPasswordChanged();
        partial void OnVPNAccessChanging(bool? value);
        partial void OnVPNAccessChanged();
        partial void OnServerGroupsChanging(string value);
        partial void OnServerGroupsChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnSecurityCodeChanging(string value);
        partial void OnSecurityCodeChanged();
        partial void OnSecuritySlotChanging(int? value);
        partial void OnSecuritySlotChanged();
        #endregion

        public Employee()
        {
            this._EmployeeLogins = new EntitySet<EmployeeLogin>(new Action<EmployeeLogin>(this.attach_EmployeeLogins), new Action<EmployeeLogin>(this.detach_EmployeeLogins));
            this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "varchar(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Department in the schema.
        /// </summary>
        [Column(Storage = "_Department", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Department
        {
            get
            {
                return this._Department;
            }
            set
            {
                if (this._Department != value)
                {
                    this.OnDepartmentChanging(value);
                    this.SendPropertyChanging("Department");
                    this._Department = value;
                    this.SendPropertyChanged("Department");
                    this.OnDepartmentChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Ext in the schema.
        /// </summary>
        [Column(Storage = "_Ext", DbType = "varchar(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Ext
        {
            get
            {
                return this._Ext;
            }
            set
            {
                if (this._Ext != value)
                {
                    this.OnExtChanging(value);
                    this.SendPropertyChanging("Ext");
                    this._Ext = value;
                    this.SendPropertyChanged("Ext");
                    this.OnExtChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DID in the schema.
        /// </summary>
        [Column(Storage = "_DID", DbType = "varchar(15) NULL", UpdateCheck = UpdateCheck.Never)]
        public string DID
        {
            get
            {
                return this._DID;
            }
            set
            {
                if (this._DID != value)
                {
                    this.OnDIDChanging(value);
                    this.SendPropertyChanging("DID");
                    this._DID = value;
                    this.SendPropertyChanged("DID");
                    this.OnDIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Storage = "_Phone", DbType = "varchar(15) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging("Phone");
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Cell in the schema.
        /// </summary>
        [Column(Storage = "_Cell", DbType = "varchar(15) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Cell
        {
            get
            {
                return this._Cell;
            }
            set
            {
                if (this._Cell != value)
                {
                    this.OnCellChanging(value);
                    this.SendPropertyChanging("Cell");
                    this._Cell = value;
                    this.SendPropertyChanged("Cell");
                    this.OnCellChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EMail in the schema.
        /// </summary>
        [Column(Storage = "_EMail", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EMail
        {
            get
            {
                return this._EMail;
            }
            set
            {
                if (this._EMail != value)
                {
                    this.OnEMailChanging(value);
                    this.SendPropertyChanging("EMail");
                    this._EMail = value;
                    this.SendPropertyChanged("EMail");
                    this.OnEMailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EMailPassword in the schema.
        /// </summary>
        [Column(Storage = "_EMailPassword", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EMailPassword
        {
            get
            {
                return this._EMailPassword;
            }
            set
            {
                if (this._EMailPassword != value)
                {
                    this.OnEMailPasswordChanging(value);
                    this.SendPropertyChanging("EMailPassword");
                    this._EMailPassword = value;
                    this.SendPropertyChanged("EMailPassword");
                    this.OnEMailPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ComputerUser in the schema.
        /// </summary>
        [Column(Storage = "_ComputerUser", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ComputerUser
        {
            get
            {
                return this._ComputerUser;
            }
            set
            {
                if (this._ComputerUser != value)
                {
                    this.OnComputerUserChanging(value);
                    this.SendPropertyChanging("ComputerUser");
                    this._ComputerUser = value;
                    this.SendPropertyChanged("ComputerUser");
                    this.OnComputerUserChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ComputerPassword in the schema.
        /// </summary>
        [Column(Storage = "_ComputerPassword", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ComputerPassword
        {
            get
            {
                return this._ComputerPassword;
            }
            set
            {
                if (this._ComputerPassword != value)
                {
                    this.OnComputerPasswordChanging(value);
                    this.SendPropertyChanging("ComputerPassword");
                    this._ComputerPassword = value;
                    this.SendPropertyChanged("ComputerPassword");
                    this.OnComputerPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Storage = "_Title", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging("Title");
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for List in the schema.
        /// </summary>
        [Column(Storage = "_List", DbType = "tinyint(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public bool? List
        {
            get
            {
                return this._List;
            }
            set
            {
                if (this._List != value)
                {
                    this.OnListChanging(value);
                    this.SendPropertyChanging("List");
                    this._List = value;
                    this.SendPropertyChanged("List");
                    this.OnListChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhonePIN in the schema.
        /// </summary>
        [Column(Storage = "_PhonePIN", DbType = "varchar(5) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PhonePIN
        {
            get
            {
                return this._PhonePIN;
            }
            set
            {
                if (this._PhonePIN != value)
                {
                    this.OnPhonePINChanging(value);
                    this.SendPropertyChanging("PhonePIN");
                    this._PhonePIN = value;
                    this.SendPropertyChanged("PhonePIN");
                    this.OnPhonePINChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ServerLogin in the schema.
        /// </summary>
        [Column(Storage = "_ServerLogin", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ServerLogin
        {
            get
            {
                return this._ServerLogin;
            }
            set
            {
                if (this._ServerLogin != value)
                {
                    this.OnServerLoginChanging(value);
                    this.SendPropertyChanging("ServerLogin");
                    this._ServerLogin = value;
                    this.SendPropertyChanged("ServerLogin");
                    this.OnServerLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ServerPassword in the schema.
        /// </summary>
        [Column(Storage = "_ServerPassword", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ServerPassword
        {
            get
            {
                return this._ServerPassword;
            }
            set
            {
                if (this._ServerPassword != value)
                {
                    this.OnServerPasswordChanging(value);
                    this.SendPropertyChanging("ServerPassword");
                    this._ServerPassword = value;
                    this.SendPropertyChanged("ServerPassword");
                    this.OnServerPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for VPNAccess in the schema.
        /// </summary>
        [Column(Storage = "_VPNAccess", DbType = "tinyint(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public bool? VPNAccess
        {
            get
            {
                return this._VPNAccess;
            }
            set
            {
                if (this._VPNAccess != value)
                {
                    this.OnVPNAccessChanging(value);
                    this.SendPropertyChanging("VPNAccess");
                    this._VPNAccess = value;
                    this.SendPropertyChanged("VPNAccess");
                    this.OnVPNAccessChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ServerGroups in the schema.
        /// </summary>
        [Column(Storage = "_ServerGroups", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string ServerGroups
        {
            get
            {
                return this._ServerGroups;
            }
            set
            {
                if (this._ServerGroups != value)
                {
                    this.OnServerGroupsChanging(value);
                    this.SendPropertyChanging("ServerGroups");
                    this._ServerGroups = value;
                    this.SendPropertyChanged("ServerGroups");
                    this.OnServerGroupsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [Column(Storage = "_Notes", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging("Notes");
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SecurityCode in the schema.
        /// </summary>
        [Column(Storage = "_SecurityCode", DbType = "varchar(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SecurityCode
        {
            get
            {
                return this._SecurityCode;
            }
            set
            {
                if (this._SecurityCode != value)
                {
                    this.OnSecurityCodeChanging(value);
                    this.SendPropertyChanging("SecurityCode");
                    this._SecurityCode = value;
                    this.SendPropertyChanged("SecurityCode");
                    this.OnSecurityCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SecuritySlot in the schema.
        /// </summary>
        [Column(Storage = "_SecuritySlot", DbType = "int(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? SecuritySlot
        {
            get
            {
                return this._SecuritySlot;
            }
            set
            {
                if (this._SecuritySlot != value)
                {
                    this.OnSecuritySlotChanging(value);
                    this.SendPropertyChanging("SecuritySlot");
                    this._SecuritySlot = value;
                    this.SendPropertyChanged("SecuritySlot");
                    this.OnSecuritySlotChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeLogins in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_EmployeeLogin", Storage="_EmployeeLogins", ThisKey="ID", OtherKey="EmployeeID", DeleteRule="RESTRICT")]
        public EntitySet<EmployeeLogin> EmployeeLogins
        {
            get
            {
                return this._EmployeeLogins;
            }
            set
            {
                this._EmployeeLogins.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Tickets in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Ticket", Storage="_Tickets", ThisKey="ID", OtherKey="EmployeeID", DeleteRule="RESTRICT")]
        public EntitySet<Ticket> Tickets
        {
            get
            {
                return this._Tickets;
            }
            set
            {
                this._Tickets.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_EmployeeLogins(EmployeeLogin entity)
        {
            this.SendPropertyChanging("EmployeeLogins");
            entity.Employee = this;
        }
    
        private void detach_EmployeeLogins(EmployeeLogin entity)
        {
            this.SendPropertyChanging("EmployeeLogins");
            entity.Employee = null;
        }

        private void attach_Tickets(Ticket entity)
        {
            this.SendPropertyChanging("Tickets");
            entity.Employee = this;
        }
    
        private void detach_Tickets(Ticket entity)
        {
            this.SendPropertyChanging("Tickets");
            entity.Employee = null;
        }
    }

    /// <summary>
    /// There are no comments for McraeitContext.IPAddress in the schema.
    /// </summary>
    [Table(Name = @"mcraei5_mcraeit.IPAddresses")]
    public partial class IPAddress : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Address;

        private string _Device;

        private string _Notes;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnDeviceChanging(string value);
        partial void OnDeviceChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        #endregion

        public IPAddress()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Storage = "_Address", CanBeNull = false, DbType = "varchar(33) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Device in the schema.
        /// </summary>
        [Column(Storage = "_Device", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Device
        {
            get
            {
                return this._Device;
            }
            set
            {
                if (this._Device != value)
                {
                    this.OnDeviceChanging(value);
                    this.SendPropertyChanging("Device");
                    this._Device = value;
                    this.SendPropertyChanged("Device");
                    this.OnDeviceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [Column(Storage = "_Notes", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging("Notes");
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for McraeitContext.ServerGroup in the schema.
    /// </summary>
    [Table(Name = @"mcraei5_mcraeit.ServerGroups")]
    public partial class ServerGroup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _GroupName;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnGroupNameChanging(string value);
        partial void OnGroupNameChanged();
        #endregion

        public ServerGroup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupName in the schema.
        /// </summary>
        [Column(Storage = "_GroupName", CanBeNull = false, DbType = "varchar(100) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string GroupName
        {
            get
            {
                return this._GroupName;
            }
            set
            {
                if (this._GroupName != value)
                {
                    this.OnGroupNameChanging(value);
                    this.SendPropertyChanging("GroupName");
                    this._GroupName = value;
                    this.SendPropertyChanged("GroupName");
                    this.OnGroupNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for McraeitContext.Ticket in the schema.
    /// </summary>
    [Table(Name = @"mcraei5_mcraeit.Tickets")]
    public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.DateTime _StartDate;

        private bool _Completed = false;

        private int? _EmployeeID;

        private string _Problem;

        private string _Solution;

        private string _Notes;
        #pragma warning restore 0649

        private EntityRef<Employee> _Employee;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnStartDateChanging(System.DateTime value);
        partial void OnStartDateChanged();
        partial void OnCompletedChanging(bool value);
        partial void OnCompletedChanged();
        partial void OnEmployeeIDChanging(int? value);
        partial void OnEmployeeIDChanged();
        partial void OnProblemChanging(string value);
        partial void OnProblemChanged();
        partial void OnSolutionChanging(string value);
        partial void OnSolutionChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        #endregion

        public Ticket()
        {
            this._Employee  = default(EntityRef<Employee>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartDate in the schema.
        /// </summary>
        [Column(Storage = "_StartDate", CanBeNull = false, DbType = "datetime NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this.SendPropertyChanging("StartDate");
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Completed in the schema.
        /// </summary>
        [Column(Storage = "_Completed", CanBeNull = false, DbType = "tinyint(1) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public bool Completed
        {
            get
            {
                return this._Completed;
            }
            set
            {
                if (this._Completed != value)
                {
                    this.OnCompletedChanging(value);
                    this.SendPropertyChanging("Completed");
                    this._Completed = value;
                    this.SendPropertyChanged("Completed");
                    this.OnCompletedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmployeeID in the schema.
        /// </summary>
        [Column(Storage = "_EmployeeID", DbType = "int(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? EmployeeID
        {
            get
            {
                return this._EmployeeID;
            }
            set
            {
                if (this._EmployeeID != value)
                {
                    if (this._Employee.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnEmployeeIDChanging(value);
                    this.SendPropertyChanging("EmployeeID");
                    this._EmployeeID = value;
                    this.SendPropertyChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Problem in the schema.
        /// </summary>
        [Column(Storage = "_Problem", CanBeNull = false, DbType = "longtext NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Problem
        {
            get
            {
                return this._Problem;
            }
            set
            {
                if (this._Problem != value)
                {
                    this.OnProblemChanging(value);
                    this.SendPropertyChanging("Problem");
                    this._Problem = value;
                    this.SendPropertyChanged("Problem");
                    this.OnProblemChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Solution in the schema.
        /// </summary>
        [Column(Storage = "_Solution", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string Solution
        {
            get
            {
                return this._Solution;
            }
            set
            {
                if (this._Solution != value)
                {
                    this.OnSolutionChanging(value);
                    this.SendPropertyChanging("Solution");
                    this._Solution = value;
                    this.SendPropertyChanged("Solution");
                    this.OnSolutionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Notes in the schema.
        /// </summary>
        [Column(Storage = "_Notes", DbType = "longtext NULL", UpdateCheck = UpdateCheck.Never)]
        public string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this.SendPropertyChanging("Notes");
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Employee in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Employee_Ticket", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
        public Employee Employee
        {
            get
            {
                return this._Employee.Entity;
            }
            set
            {
                Employee previousValue = this._Employee.Entity;
                if ((previousValue != value) || (this._Employee.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Employee");
                    if (previousValue != null)
                    {
                        this._Employee.Entity = null;
                        previousValue.Tickets.Remove(this);
                    }
                    this._Employee.Entity = value;
                    if (value != null)
                    {
                        this._EmployeeID = value.ID;
                        value.Tickets.Add(this);
                    }
                    else
                    {
                        this._EmployeeID = default(int?);
                    }
                    this.SendPropertyChanged("Employee");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for McraeitContext.User in the schema.
    /// </summary>
    [Table(Name = @"mcraei5_mcraeit.Users")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _Name;

        private string _User1;

        private string _Password;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnUser1Changing(string value);
        partial void OnUser1Changed();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        #endregion

        public User()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "int(11) NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "varchar(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User1 in the schema.
        /// </summary>
        [Column(Name = @"User", Storage = "_User1", CanBeNull = false, DbType = "varchar(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string User1
        {
            get
            {
                return this._User1;
            }
            set
            {
                if (this._User1 != value)
                {
                    this.OnUser1Changing(value);
                    this.SendPropertyChanging("User1");
                    this._User1 = value;
                    this.SendPropertyChanged("User1");
                    this.OnUser1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`Password`", Storage = "_Password", CanBeNull = false, DbType = "varchar(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
